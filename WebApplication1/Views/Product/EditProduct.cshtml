@model WebApplication1.Models.Product

@{
    ViewData["Title"] = "Chỉnh sửa sản phẩm";
}

<style>
    body, html {
        margin: 0;
        padding: 3% 0; 
        height: 100%;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        background: linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%);
    }

    .center-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .glass-container {
        width: 100%;
        max-width: 600px;
        padding: 30px;
        border-radius: 1rem;
        background: rgba(255, 255, 255, 0.25);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        color: #212529;
    }

    label.form-label {
        font-weight: 600;
        color: #343a40;
    }

    button.btn-dark {
        background-color: #343a40;
        border: none;
        transition: background-color 0.3s ease;
    }

        button.btn-dark:hover {
            background-color: #23272b;
        }
</style>

<div class="center-wrapper">
    <div class="glass-container">
        <h3 class="mb-4 text-center">Chỉnh sửa sản phẩm</h3>

        @using (Html.BeginForm("EditProduct", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(m => m.ProductId)

            <div class="mb-3">
                <label class="form-label">Tên sản phẩm</label>
                @Html.TextBoxFor(m => m.NamePro, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.NamePro, "", new { @class = "text-danger small" })
            </div>

            <div class="mb-3">
                <label class="form-label">Giá tiền</label>
                @Html.TextBoxFor(m => m.Price, new { @class = "form-control", type = "number", step = "0.01" })
                @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger small" })
            </div>

            <div class="mb-3">
                <label class="form-label">Mô tả</label>
                @Html.TextAreaFor(m => m.DecriptionPro, new { @class = "form-control", rows = 3 })
            </div>

            <div class="mb-3">
                <label class="form-label">Loại sản phẩm</label>
                @await Component.InvokeAsync("CategoryList", new { selectedCategory = Model.Category })
                @Html.ValidationMessageFor(m => m.Category, "", new { @class = "text-danger small" })
            </div>

            <div class="mb-3">
                <label class="form-label">Ngày sản xuất</label>
                @Html.TextBoxFor(m => m.ManufacturingDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                @Html.ValidationMessageFor(m => m.ManufacturingDate, "", new { @class = "text-danger small" })

            </div>

            <div class="mb-3">
                <label class="form-label">Ảnh hiện tại</label><br />
                <img id="previewImage" src="~/images/@Model.ImagePro" class="img-thumbnail" style="max-height: 150px;" />
            </div>

            <div class="mb-3">
                <label class="form-label">Chọn ảnh mới</label>
                <input type="file" name="ImageUpload" accept="image/*" class="form-control" />
            </div>

            <button type="submit" class="btn btn-dark w-100">Lưu</button>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelector('input[name="ImageUpload"]').addEventListener("change", function () {
            const file = this.files[0];
            const preview = document.getElementById("previewImage");
            if (file && preview) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    preview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    </script>
}
